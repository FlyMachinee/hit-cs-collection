#include <bits/stdc++.h>
#include <conio.h>
#include <windows.h>

#include "cmd_console_tools.h"

#define MAX_STACK 16

using namespace std;

//文件名：hanoi.h
//内容：包含所有自定义类的声明

int GetColor(int type);

//******************************************************
//类：MyStack
//作用：对栈操作的数组模拟，亦包含了展示栈内元素的方法
//******************************************************
class MyStack
{
public:

    //用数组模拟栈
    int data[MAX_STACK];

    //指向栈顶上一格的指针
    int top;


    //***************************************
    //方法名：MyStack
    //类：MyStack
    //形参：
    //返回值：
    //作用：构造函数
    //***************************************
    MyStack();


    //***************************************
    //方法名：init
    //类：MyStack
    //形参：
    //返回值：
    //作用：初始化栈，即：栈清空，栈顶归零
    //***************************************
    void init();


    //***************************************
    //方法名：init
    //类：MyStack
    //形参：int lvl(初始化的层数)
    //返回值：
    //作用：初始化栈，即：清空栈，再将lvl, lvl-1, lvl-2, ..., 3, 2, 1，这lvl个int值进行依次入栈
    //***************************************
    void init(int lvl);


    //***************************************
    //方法名：getTop
    //类：MyStack
    //形参：
    //返回值：栈顶元素，若栈空则返回-1
    //作用：返回栈顶元素，若栈空则返回-1
    //***************************************
    int getTop();


    //***************************************
    //方法名：pop
    //类：MyStack
    //形参：
    //返回值：栈顶元素，若栈空则返回-1
    //作用：弹栈，清空栈顶，并返回栈顶元素，若栈空则返回-1
    //***************************************
    int pop();


    //***************************************
    //方法名：push
    //类：MyStack
    //形参：int ele
    //返回值：压栈成功返回0，栈满返回-1
    //作用：将ele值进行压栈，压栈成功返回0，栈满返回-1
    //***************************************
    int push(int ele);


    //***************************************
    //方法名：showHorizontal
    //类：MyStack
    //形参：
    //返回值：
    //作用：将栈横向打印出来，从左至右，由栈底至栈顶，0元素视为" "
    //***************************************
    void showHorizontal();


    //***************************************
    //方法名：showVertical
    //类：MyStack
    //形参：int x, int y, 打印光标坐标
    //返回值：
    //作用：在光标处将栈纵向打印出来，从上至下，由栈顶至栈底，0元素视为" "
    //***************************************
    void showVertical(int x, int y);
};


//******************************************************
//类：Menu
//作用：游戏信息的输入，并根据不同的选项执行不同语句
//******************************************************
class Menu
{
public:

    //游戏的层数，动画播放速度，选项（命令）值
    int lvl, speed, cmd;

    //初始柱，终点柱，经由柱
    char from, to, by;



    //***************************************
    //方法名：getMessage
    //类：Menu
    //形参：
    //返回值：
    //作用：获取游戏信息
    //***************************************
    void getMessage();


    //***************************************
    //方法名：actCommand
    //类：Menu
    //形参：
    //返回值：
    //作用：根据不同的选项执行不同语句
    //***************************************
    void actCommand(MyStack pillar[3]);
};


//******************************************************
//类：Hanoi
//作用：汉诺塔步骤的计算，以及汉诺塔游戏过程的展示
//******************************************************
class Hanoi
{
public:

    //步骤数（程序计算的，非玩家手动操作步骤数）
    int cnt;

    //接收Menu类中的命令值
    int cmd;

    //接收Menu类中的动画播放速度
    int speed;



    //***************************************
    //方法名：solve
    //类：Hanoi
    //形参：MyStack pillar[3] （三个柱子），int level（操作盘的大小），int from, int to, int by（初始柱，终点柱，经由柱）
    //返回值：
    //作用：递归计算汉诺塔游戏步骤，核心函数
    //***************************************
    void solve(MyStack pillar[3], int level, int from, int to, int by);


    //***************************************
    //方法名：show
    //类：Hanoi
    //形参：MyStack pillar[3] （三个柱子），int level（操作盘的大小），int from, int to, int by（初始柱，终点柱，经由柱）
    //返回值：
    //作用：根据命令值（cmd），展示不同的汉诺塔游戏步骤
    //***************************************
    void show(MyStack pillar[3], int level, int from, int to, int by);


    //***************************************
    //方法名：showSimple
    //类：Hanoi
    //形参：int level（操作盘的大小），int from, int to（初始柱，终点柱）
    //返回值：
    //作用：简单打印步骤，例：5# A-->C
    //***************************************
    void showSimple(int level, int from, int to);


    //***************************************
    //方法名：showSimpleWithCount
    //类：Hanoi
    //形参：int level（操作盘的大小），int from, int to（初始柱，终点柱）
    //返回值：
    //作用：简单打印步骤，带步骤数，例：第  94 步 (2# C-->A)
    //***************************************
    void showSimpleWithCount(int level, int from, int to);


    //***************************************
    //方法名：showSimpleWithCountAndStacks
    //类：Hanoi
    //形参：MyStack pillar[3] （三个柱子），int level（操作盘的大小），int from, int to（初始柱，终点柱）
    //返回值：
    //作用：简单打印步骤，带步骤数，以及各个柱子中的盘子情况
    //例：第 114 步 (2#: B-->C)  A: 1                   B: 4 3                 C: 7 6 5 2
    //***************************************
    void showSimpleWithCountAndStacks(MyStack pillar[3], int level, int from, int to);


    //***************************************
    //方法名：showVerticalStacksAndLabels
    //类：Hanoi
    //形参：MyStack pillar[3] （三个柱子），int from, int to（初始柱，终点柱），int x, int y（打印坐标）
    //返回值：
    //作用：在光标处，分别竖直打印每个柱子的情况，带分界线以及标签，见下例
    //例：
    //        5
    //        6    1    2
    //        7    4    3
    //      ===============
    //        A    B    C
    //***************************************
    void showVerticalStacksAndLabels(MyStack pillar[3], int from, int to, int x, int y);


    //***************************************
    //方法名：showElement
    //类：Hanoi
    //形参：int type（元素类型），int x, int y（打印坐标）
    //返回值：
    //作用：在光标处打印元素，0为柱子，1-10为盘子，-1为柱底的托盘
    //***************************************
    void showElement(int type, int x, int y);


    //***************************************
    //方法名：showPillar
    //类：Hanoi
    //形参：MyStack pillar[3] （三个柱子），int x, int y（打印坐标）
    //返回值：
    //作用：在光标处依次打印三个柱子
    //***************************************
    void showPillar(MyStack pillar[3], int x, int y);


    //***************************************
    //方法名：showMove
    //类：Hanoi
    //形参：MyStack pillar[3] （三个柱子），int x, int y（打印坐标），int level（操作盘的大小），int from, int to（初始柱，终点柱）
    //返回值：
    //作用：展现出将level大小的盘子从from柱移动至to柱的动画过程
    //***************************************
    void showMove(MyStack pillar[3], int x, int y, int level, int from, int to);
};


//******************************************************
//类：Manual
//作用：手动汉诺塔游戏的主体
//******************************************************
class Manual
{
public:

    //***************************************
    //方法名：game
    //类：Manual
    //形参：MyStack pillar[3] （三个柱子），int level（操作盘的大小），int from, int to（初始柱，终点柱）
    //返回值：
    //作用：进行手动游戏过程
    //***************************************
    void game(MyStack pillar[3], int level, int from, int to);


    //***************************************
    //方法名：isWin
    //类：Manual
    //形参：MyStack pillar[3] （三个柱子），int level（操作盘的大小），int to（终点柱）
    //返回值：
    //作用：判断游戏是否胜利
    //***************************************
    bool isWin(MyStack pillar[3], int level, int to);


    //***************************************
    //方法名：getGameCommand
    //类：Manual
    //形参：int &from, int &to（手动将某盘从from柱移动至to柱）
    //返回值：
    //作用：获取手动移动指令
    //***************************************
    void getGameCommand(int &from, int &to);
};
